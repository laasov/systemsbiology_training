}
return(updated)
}
boolsim(steps = 10, model.state, perturb = F)
boolsim(steps = 10, model.state, perturb = T)
boolsim(steps = 10, model.state, perturb = TRUE)
boolsim(steps = 10, model.state, perturb = FALSE)
update_MDM2 <- function(state, perturb){
if (perturb) {
print("perturb TRUE")
updated <- 0
} else {
print("perturb FALSE")
updated <- ifelse(state[INDEX_P53] == 1 & state[INDEX_MDM2]  == 1, 1, 0)
}
return(updated)
}
boolsim(steps = 10, model.state, perturb = FALSE)
boolsim(steps = 10, model.state, perturb = TRUE)
update_MDM2 <- function(state, perturb){
if (perturb) {
updated <- 0
} else {
updated <- ifelse(state[INDEX_P53] == 1 & state[INDEX_MDM2]  == 1, 1, 0)
}
return(updated)
}
boolsim(steps = 10, model.state, perturb = TRUE)
boolsim(steps = 10, model.state, perturb = F)
boolsim(steps = 10, model.state, perturb = F)
boolsim(steps = 10, model.state, perturb = T)
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print("Begin state")
print(beginState)
state <- beginState
for (t in 1:steps){
updated_p53 <- update_p53(state)
updated_MDM2 <- update_MDM2(state, perturb)
updated_BCL2 <- update_BCL2(state)
updated_BAX <- update_BAX(state)
updated_CASP <- update_CASP(state)
newState  <- c(updated_p53, updated_MDM2, updated_BCL2, updated_BAX, updated_CASP)
state <- newState
print(tail(state, 5))
}
}
boolsim(steps = 10, model.state, perturb = F)
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print("Begin state")
print(beginState)
print("there")
state <- beginState
for (t in 1:steps){
updated_p53 <- update_p53(state)
updated_MDM2 <- update_MDM2(state, perturb)
updated_BCL2 <- update_BCL2(state)
updated_BAX <- update_BAX(state)
updated_CASP <- update_CASP(state)
newState  <- c(updated_p53, updated_MDM2, updated_BCL2, updated_BAX, updated_CASP)
state <- newState
print(tail(state, 5))
}
}
boolsim(steps = 10, model.state, perturb = F)
# p53 = 1, MDM2 = 1, BCL2 = 1, BAX = 1, CASP = 1
model.state <- c(1, 0, 1, 1, 1)
boolsim(steps = 10, model.state, perturb = F)
boolsim(steps = 10, model.state, perturb = T)
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print("Initial states")
print(beginState)
print("Updated states")
state <- beginState
for (t in 1:steps){
updated_p53 <- update_p53(state)
updated_MDM2 <- update_MDM2(state, perturb)
updated_BCL2 <- update_BCL2(state)
updated_BAX <- update_BAX(state)
updated_CASP <- update_CASP(state)
newState  <- c(updated_p53, updated_MDM2, updated_BCL2, updated_BAX, updated_CASP)
state <- newState
print(tail(state, 5))
}
}
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print("Initial states:")
print(beginState)
print("Updated states:")
state <- beginState
for (t in 1:steps){
updated_p53 <- update_p53(state)
updated_MDM2 <- update_MDM2(state, perturb)
updated_BCL2 <- update_BCL2(state)
updated_BAX <- update_BAX(state)
updated_CASP <- update_CASP(state)
newState  <- c(updated_p53, updated_MDM2, updated_BCL2, updated_BAX, updated_CASP)
state <- newState
print(tail(state, 5))
}
}
boolsim(steps = 10, model.state, perturb = T)
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print("Initial state:")
print(beginState)
print("Updated state:")
state <- beginState
for (t in 1:steps){
updated_p53 <- update_p53(state)
updated_MDM2 <- update_MDM2(state, perturb)
updated_BCL2 <- update_BCL2(state)
updated_BAX <- update_BAX(state)
updated_CASP <- update_CASP(state)
newState  <- c(updated_p53, updated_MDM2, updated_BCL2, updated_BAX, updated_CASP)
state <- newState
print(tail(state, 5))
}
}
boolsim(steps = 10, model.state, perturb = T)
boolsim(steps = 10, model.state, perturb = F)
update_MDM2 <- function(state, perturb){
updated <- ifelse(state[INDEX_P53] == 1 & state[INDEX_MDM2]  == 1, 1, 0)
return(updated)
}
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print("Initial state:")
print(beginState)
print("Updated state:")
state <- beginState
for (t in 1:steps){
updated_p53 <- update_p53(state)
updated_MDM2 <- update_MDM2(state, perturb)
updated_BCL2 <- update_BCL2(state)
updated_BAX <- update_BAX(state)
updated_CASP <- update_CASP(state)
newState  <- c(updated_p53, updated_MDM2, updated_BCL2, updated_BAX, updated_CASP)
state <- newState
print(tail(state, 5))
}
}
# Without perturbation on MDM2 state
boolsim(steps = 10, model.state, perturb = F)
# With perturbed MDM2 state --- forces MDM2 = 0 at all times
boolsim(steps = 10, model.state, perturb = T)
update_MDM2 <- function(state, perturb){
if (perturb) {
updated <- 0
} else {
updated <- ifelse(state[INDEX_P53] == 1 & state[INDEX_MDM2]  == 1, 1, 0)
}
updated <- ifelse(state[INDEX_P53] == 1 & state[INDEX_MDM2]  == 1, 1, 0)
return(updated)
}
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print("Initial state:")
print(beginState)
print("Updated state:")
state <- beginState
for (t in 1:steps){
#updated_p53 <- update_p53(state)
#updated_MDM2 <- update_MDM2(state, perturb)
#updated_BCL2 <- update_BCL2(state)
#updated_BAX <- update_BAX(state)
#updated_CASP <- update_CASP(state)
newState <- c(update_p53(state),
update_MDM2(state, perturb),
update_BCL2(state),
update_BAX(state),
update_CASP(state))
#newState  <- c(updated_p53, updated_MDM2, updated_BCL2, updated_BAX, updated_CASP)
state <- newState
print(tail(state, 5))
}
}
# Without perturbation on MDM2 state
boolsim(steps = 10, model.state, perturb = F)
update_MDM2 <- function(state, perturb){
if (perturb) {
updated <- 0
} else {
updated <- ifelse(state[INDEX_P53] == 1 & state[INDEX_MDM2]  == 1, 1, 0)
}
return(updated)
}
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print("Initial state:")
print(beginState)
print("Updated state:")
state <- beginState
for (t in 1:steps){
newState <- c(update_p53(state),
update_MDM2(state, perturb),
update_BCL2(state),
update_BAX(state),
update_CASP(state))
state <- newState
print(tail(state, 5))
}
}
# Without perturbation on MDM2 state
boolsim(steps = 10, model.state, perturb = F)
# With perturbed MDM2 state --- forces MDM2 = 0 at all times
boolsim(steps = 10, model.state, perturb = T)
# Simulate a Boolean network. Display the current state vector
# at each time step.
# - steps: number of time steps to simulate
# - beginState: 5-element Boolean begin state vector, containing
#   the numbers 0 and 1. Example: c(0, 1, 0, 1, 0).
boolsim <- function(steps, beginState){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print(beginState)
state <- beginState
for (t in 1:steps){
newState <- c(update_p53(state),
update_MDM2(state, perturb),
update_BCL2(state),
update_BAX(state),
update_CASP(state))
state <- newState
print(state)
}
}
#source("~/Documents/intro_to_systems_biology/Exercise Set 2-20210505/boolsim.R")
source("~/Downloads/boolsim.R")
# Without perturbation on MDM2 state
boolsim(steps = 10, model.state, perturb = F)
# Simulate a Boolean network. Display the current state vector
# at each time step.
# - steps: number of time steps to simulate
# - beginState: 5-element Boolean begin state vector, containing
#   the numbers 0 and 1. Example: c(0, 1, 0, 1, 0).
boolsim <- function(steps, beginState){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print(beginState)
state <- beginState
for (t in 1:steps){
newState <- c(update_p53(state),
update_MDM2(state),
update_BCL2(state),
update_BAX(state),
update_CASP(state))
state <- newState
print(state)
}
}
# Without perturbation on MDM2 state
boolsim(steps = 10, model.state, perturb = F)
# Without perturbation on MDM2 state
boolsim(steps = 10, model.state)#, perturb = F)
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state)#, perturb = F)
update_MDM2 <- function(state){
# A full if-else not going to slow us too much here
if (perturb) {
updated <- 0
} else {
updated <- as.numeric(state[INDEX_P53])
}
return(updated)
}
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state, perturb = F)#, perturb = F)
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state, F)#, perturb = F)
# Simulate a Boolean network. Display the current state vector
# at each time step.
# - steps: number of time steps to simulate
# - beginState: 5-element Boolean begin state vector, containing
#   the numbers 0 and 1. Example: c(0, 1, 0, 1, 0).
boolsim <- function(steps, beginState, perturb){
# Define human-readable names for state indices.
# ".GlobalEnv" value for the envir parameter ensures the constants are also
# visible in the update functions.
assign("INDEX_P53", 1, envir = .GlobalEnv)
assign("INDEX_MDM2", 2, envir = .GlobalEnv)
assign("INDEX_BCL2", 3, envir = .GlobalEnv)
assign("INDEX_BAX", 4, envir = .GlobalEnv)
assign("INDEX_CASP", 5, envir = .GlobalEnv)
# Note: when calling update rules at time t, we need to use the
# t-1 state for all genes. So, we first construct a temporary state
# vector corresponding to time t and keep the t-1 states in
# the old vector.
print(beginState)
state <- beginState
for (t in 1:steps){
newState <- c(update_p53(state),
update_MDM2(state, perturb),
update_BCL2(state),
update_BAX(state),
update_CASP(state))
state <- newState
print(state)
}
}
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state, F)#, perturb = F)
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state, perturb = F)#, perturb = F)
update_MDM2 <- function(state, perturb){
# A full if-else not going to slow us too much here
if (perturb) {
updated <- 0
} else {
updated <- as.numeric(state[INDEX_P53])
}
return(updated)
}
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state, F)#, perturb = F)
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state, T)#, perturb = F)
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state, F)#, perturb = F)
source("~/Documents/intro_to_systems_biology/Exercise Set 2-20210505/boolsim.R")
# Without perturbation on MDM2 state
boolsim(steps = 20, model.state, F)
# With perturbed MDM2 state --- forces MDM2 = 0 at all times
boolsim(steps = 10, model.state, perturb = T)
# Without perturbation on MDM2 state
boolsim(steps = 10, model.state, F)
phi <- function (x) {x^3 + 6*x^2 + x -8}
d_phi <- function (x) {3*x^2 + 12*x + 1 }
newton <- function (x, niter) {
x_n <- x
for (i in 1:niter) {
x_nplus1 <-  x_n - phi(x_n) / d_phi(x_n)
x_n <- x_nplus1
}
return(x_n)
}
newton <- function (x, niter) {
x_n <- x
for (i in 1:niter) {
x_nplus1 <-  x_n - phi(x_n) / d_phi(x_n)
x_n <- x_nplus1
print(x_n)
}
}
newton(0.5, 5)
newton(0, 5)
newton(0, 10)
newton(1, 10)
newton(2, 10)
newton(100, 10)
newton(200, 10)
newton(200, 20)
newton(1000, 20)
plot(phi, 0, 10)
plot(phi, -10, 10)
phi <- function (x) {sqrt((8-x^3) / 6)}
d_phi <- function (x) {-(1/2) * sqrt(3/2) * x^2 / sqrt(8 - x^3)}
plot(phi, -10, 10)
newton(1, 5)
newton(2, 5)
newton(1.5, 5)
newton(1, 5)
newton(1.5, 5)
newton(2, 5)
newton(1.5, 5)
newton(1.6, 5)
plot(phi,-5,5)
plot(phi,1,2)
phi(1)
phi(2)
plot(d_phi, add = T)
plot(d_phi)
plot(d_phi, add = T)
plot(phi,1,2)
plot(d_phi, add = T)
plot(d_phi, add = T)
plot(d_phi)
plot(phi,1,2)
plot(d_phi,1,2, add = T)
plot(phi,1,2)
plot(d_phi,1,2, add = TRUE)
plot(phi,1,2)
plot(X,1,2, add = TRUE)
plot(phi,1,2)
plot(function(x) {x},1,2, add = TRUE)
plot(phi,0,2)
plot(function(x) {x},0,2, add = TRUE)
source("~/Documents/intro_to_systems_biology/Exercise Set 2-20210505/boolsim.R")
#
#   Synchronous and deterministic Boolean network simulation
#
#   Eats a 5-dimensional logical vector
#   Updates the model according to given Boolean functions
#   Returns the state vector at t = steps
#
# p53 = 1, MDM2 = 1, BCL2 = 1, BAX = 1, CASP = 1
model.state <- c(1, 0, 1, 1, 1)
# Without perturbation on MDM2 state
boolsim(steps = 10, model.state, F)
# With perturbed MDM2 state --- forces MDM2 = 0 at all times
boolsim(steps = 10, model.state, perturb = T)
